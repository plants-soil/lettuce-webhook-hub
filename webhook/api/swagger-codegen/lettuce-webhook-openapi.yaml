openapi: 3.0.3
info:
  title: Plants Soil Lettuce (Webhook Engine)  - OpenAPI 3.0
  description: |-
    This is a Webhook Engine Core API based on the OpenAPI 3.0 specification.
    You can register as publisher and trigger (publish) events (message carried) as needed, all subscribers could receive the events instantly.
    You can register as subscriber with webhooks to listen on and receive events (messages carried) from publishers you subscribed.

    Some useful links:
    - [The Lettuce Webhook Engine repository](https://github.com/plants-soil/lettuce-webhook-hub)
  contact:
    email: danialdy@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://lettuce.plantssoil.com/api/v1
tags:
  - name: organization
    description: All APIs for organization registry
  - name: publisher
    description: All APIs for publisher registry
  - name: subscriber
    description: All APIs for subscriber registry
  - name: webhook
    description: All APIs for webhook registry
  - name: engine
    description: All APIs for webhook engine functions
paths:
  /organization:
    put:
      tags:
        - organization
      summary: Update an existing organization
      description: Update an existing organization by organizationId
      operationId: updateOrganization
      requestBody:
        description: Update an existent organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
          application/xml:
            schema:
              $ref: '#/components/schemas/Organization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Organization not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - organization_auth:
            - write:organizations
            - read:organizations
    post:
      tags:
        - organization
      summary: Add a new organization
      description: Add a new organization
      operationId: addOrganization
      requestBody:
        description: Create a new organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
          application/xml:
            schema:
              $ref: '#/components/schemas/Organization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - api_key: []
        - organization_auth:
            - write:organizations
            - read:organizations
  /organization/all:
    get:
      tags:
        - organization
      summary: Find all organizations with pagination
      description: Will find the organizations on the page specified (page, pageSize)
      operationId: findAllOrganizations
      parameters:
        - name: page
          in: query
          description: The page number of organization query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum organizations on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '400':
          description: Validation exception
      security:
        - organization_auth:
            - write:organizations
            - read:organizations
  /organization/{organizationId}:
    get:
      tags:
        - organization
      summary: Find organization by ID
      description: Returns a single organization
      operationId: findOrganizationById
      parameters:
        - name: organizationId
          in: path
          description: ID of organization to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found
      security:
        - organization_auth:
            - write:organizations
            - read:organizations
    put:
      tags:
        - organization
      summary: Update an existing organization
      description: Update an existing organization by organizationId
      operationId: updateOrganizationById
      parameters:
        - name: organizationId
          in: path
          description: ID of organization that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
          application/xml:
            schema:
              $ref: '#/components/schemas/Organization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Organization not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - organization_auth:
            - write:organizations
            - read:organizations
  /publisher:
    post:
      tags:
        - publisher
      summary: Add a new publisher
      description: Add a new publisher
      operationId: addPublisher
      requestBody:
        description: Create a new publisher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
          application/xml:
            schema:
              $ref: '#/components/schemas/Publisher'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - api_key: []
        - publisher_auth:
            - write:publishers
            - read:publishers
  /publisher/all:
    get:
      tags:
        - publisher
      summary: Find all publishers with pagination
      description: Will find the publishers on the page specified (page, pageSize)
      operationId: findAllPublishers
      parameters:
        - name: page
          in: query
          description: The page number of publishers query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum publishers on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
        '400':
          description: Validation exception
      security:
        - publisher_auth:
            - write:publishers
            - read:publishers
  /publisher/{publisherId}:
    get:
      tags:
        - publisher
      summary: Find publisher by ID
      description: Returns a single publisher
      operationId: findPublisherById
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          description: Invalid ID supplied
        '404':
          description: Publisher not found
      security:
        - publisher_auth:
            - write:publishers
            - read:publishers
    put:
      tags:
        - publisher
      summary: Update an existing publisher
      description: Update an existing publisher by publisherId
      operationId: updatePublisherById
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent publisher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
          application/xml:
            schema:
              $ref: '#/components/schemas/Publisher'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Publisher not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - publisher_auth:
            - write:publishers
            - read:publishers
  /publisher/{publisherId}/event:
    post:
      tags:
        - publisher
      summary: Add an event to an existing publisher
      description: add an event to an existing publisher by publisherId
      operationId: addEvent
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that to add event
          required: true
          schema:
            type: string
      requestBody:
        description: add an event to an existing publisher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Publisher not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - event_auth:
            - write:events
            - read:events
  /publisher/{publisherId}/events:
    post:
      tags:
        - publisher
      summary: Add events to an existing publisher
      description: add events to an existing publisher by publisherId
      operationId: addEvents
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that to add events
          required: true
          schema:
            type: string
      requestBody:
        description: add events to an existing publisher
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'          
          application/xml:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'          
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'          
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'          
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Publisher not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - event_auth:
            - write:events
            - read:events
  /publisher/{publisherId}/allEvents:
    get:
      tags:
        - publisher
      summary: Find all events which belong to the specific publisher
      description: Find all events which belong to the specific publisher with pagination
      operationId: findEvents
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that to add event
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number of events query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum events on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Validation exception
      security:
        - event_auth:
            - write:events
            - read:events
  /publisher/event/{eventId}:
    get:
      tags:
        - publisher
      summary: Find event by ID
      description: Returns a single event
      operationId: findEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      security:
        - api_key: []
        - event_auth:
            - write:events
            - read:events
  /publisher/{publisherId}/datagroup:
    post:
      tags:
        - publisher
      summary: Add a data group to an existing publisher
      description: add a data group to an existing publisher by publisherId
      operationId: addDataGroup
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that to add data group
          required: true
          schema:
            type: string
      requestBody:
        description: add a data group to an existing publisher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataGroup'
          application/xml:
            schema:
              $ref: '#/components/schemas/DataGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DataGroup'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataGroup'          
            application/xml:
              schema:
                $ref: '#/components/schemas/DataGroup'
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Publisher not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - datagroup_auth:
            - write:datagroups
            - read:datagroups
    get:
      tags:
        - publisher
      summary: Find data group which belong to the specific publisher
      description: Find data group which belong to the specific publisher with data group name
      operationId: findDataGroupByName
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that data groups belong to
          required: true
          schema:
            type: string
        - name: dataGroup
          in: query
          description: The data group name to find
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataGroup'
            application/xml:
              schema:
                $ref: '#/components/schemas/DataGroup'
        '400':
          description: Validation exception
      security:
        - datagroup_auth:
            - write:datagroups
            - read:datagroups
  /publisher/{publisherId}/datagroups:
    post:
      tags:
        - publisher
      summary: Add data groups to an existing publisher
      description: add data groups to an existing publisher by publisherId
      operationId: addDataGroups
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that to add data groups
          required: true
          schema:
            type: string
      requestBody:
        description: add data groups to an existing publisher
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataGroup'          
          application/xml:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataGroup'          
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataGroup'          
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataGroup'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataGroup'          
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Publisher not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - datagroup_auth:
            - write:datagroups
            - read:datagroups
  /publisher/{publisherId}/allDataGroups:
    get:
      tags:
        - publisher
      summary: Find all data groups which belong to the specific publisher
      description: Find all data groups which belong to the specific publisher with pagination
      operationId: findDataGroups
      parameters:
        - name: publisherId
          in: path
          description: ID of publisher that data groups belong to
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number of data groups query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum data groups on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataGroup'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataGroup'
        '400':
          description: Validation exception
      security:
        - datagroup_auth:
            - write:datagroups
            - read:datagroups
  /publisher/datagroup/{dataGroupId}:
    get:
      tags:
        - publisher
      summary: Find data group by ID
      description: Returns a single data group
      operationId: findDataGroupById
      parameters:
        - name: dataGroupId
          in: path
          description: ID of data group to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataGroup'          
            application/xml:
              schema:
                $ref: '#/components/schemas/DataGroup'
        '400':
          description: Invalid ID supplied
        '404':
          description: Data Group not found
      security:
        - datagroup_auth:
            - write:datagroups
            - read:datagroups
  /subscriber:
    post:
      tags:
        - subscriber
      summary: Add a new subscriber
      description: Add a new subscriber
      operationId: addSubscriber
      requestBody:
        description: Create a new subscriber
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/xml:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subscriber'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Subscriber'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - api_key: []
        - subscriber_auth:
            - write:subscribers
            - read:subscribers
  /subscriber/all:
    get:
      tags:
        - subscriber
      summary: Find all subscribers with pagination
      description: Will find the subscribers on the page specified (page, pageSize)
      operationId: findAllSubscribers
      parameters:
        - name: page
          in: query
          description: The page number of subscribers query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum subscribers on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscriber'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscriber'
        '400':
          description: Validation exception
      security:
        - subscriber_auth:
            - write:subscribers
            - read:subscribers
  /subscriber/{subscriberId}:
    get:
      tags:
        - subscriber
      summary: Find subscriber by ID
      description: Returns a single subscriber
      operationId: findSubscriberById
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Subscriber'
        '400':
          description: Invalid ID supplied
        '404':
          description: Subscriber not found
      security:
        - subscriber_auth:
            - write:subscribers
            - read:subscribers
    put:
      tags:
        - subscriber
      summary: Update an existing subscriber
      description: Update an existing subscriber by subscriberId
      operationId: updateSubscriberById
      parameters:
        - name: subscriberId
          in: path
          description: ID of subscriber that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent subscriber
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/xml:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subscriber'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Subscriber'
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Subscriber not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - subscriber_auth:
            - write:subscribers
            - read:subscribers
    delete:
      tags:
        - subscriber
      summary: Deletes a subscriber
      description: delete a subscriber
      operationId: deleteSubscriber
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: subscriberId
          in: path
          description: ID of subscriber to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid subscriber value
      security:
        - api_key: []
        - subscriber_auth:
            - write:subscribers
            - read:subscribers
  /webhook:
    post:
      tags:
        - webhook
      summary: Add a new webhook
      description: Add a new webhook
      operationId: addWebhook
      requestBody:
        description: Create a new webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
          application/xml:
            schema:
              $ref: '#/components/schemas/Webhook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/all:
    get:
      tags:
        - webhook
      summary: Find all webhooks which belong to specific subscriber with pagination
      description: Will find the webhooks on the page specified (page, pageSize)
      operationId: findAllWebhooks
      parameters:
        - name: subscriberId
          in: query
          description: ID of subscriber which webhooks belong to
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number of webhooks query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum webhooks on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        '400':
          description: Validation exception
      security:
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/{webhookId}:
    get:
      tags:
        - webhook
      summary: Find webhook by ID
      description: Returns a single webhook
      operationId: findWebhookById
      parameters:
        - name: webhookId
          in: path
          description: ID of webhook to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
    put:
      tags:
        - webhook
      summary: Update an existing webhook
      description: Update an existing webhook by webhookId
      operationId: updateWebhookById
      parameters:
        - name: webhookId
          in: path
          description: ID of webhook to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
          application/xml:
            schema:
              $ref: '#/components/schemas/Webhook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Required attributes cant't be null!
        '404':
          description: Webhook not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/activate:
    post:
      tags:
        - webhook
      summary: Activate webhook
      description: Activate webhook and change webhook status to production
      operationId: activateWebhook
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook to activate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/deactivate:
    post:
      tags:
        - webhook
      summary: Deactivate webhook
      description: Deactivate webhook and change webhook status to inactive
      operationId: deactivateWebhook
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook to deactivate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/subscribeEvent:
    post:
      tags:
        - webhook
      summary: Subscribe a publisher event for webhook
      description: Subscribe a publisher event for webhook
      operationId: subscribeEvent
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: eventId
          in: query
          description: ID of publisher event to subscribe
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or event not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/unsubscribeEvent:
    post:
      tags:
        - webhook
      summary: Unsubscribe a publisher event for webhook
      description: Unsubscribe a publisher event for webhook
      operationId: unsubscribeEvent
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: eventId
          in: query
          description: ID of publisher event to unsubscribe
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or event not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/subscribeEvents:
    post:
      tags:
        - webhook
      summary: Subscribe publisher events for webhook
      description: Subscribe publisher events for webhook
      operationId: subscribeEvents
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: eventIds
          in: query
          description: ID array of publisher events to subscribe
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or event not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/unsubscribeEvents:
    post:
      tags:
        - webhook
      summary: Unsubscribe publisher events for webhook
      description: Unsubscribe publisher events for webhook
      operationId: unsubscribeEvents
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: eventIds
          in: query
          description: ID array of publisher events to unsubscribe
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or event not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/subscribeDataGroup:
    post:
      tags:
        - webhook
      summary: Subscribe a publisher data group for webhook
      description: Subscribe a publisher data group for webhook
      operationId: subscribeDataGroup
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: dataGroupId
          in: query
          description: ID of publisher data group to subscribe
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or data group not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/unsubscribeDataGroup:
    post:
      tags:
        - webhook
      summary: Unsubscribe a publisher data group for webhook
      description: Unsubscribe a publisher data group for webhook
      operationId: unsubscribeDataGroup
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: dataGroupId
          in: query
          description: ID of publisher data group to unsubscribe
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or data group not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/subscribeDataGroups:
    post:
      tags:
        - webhook
      summary: Subscribe publisher data groups for webhook
      description: Subscribe publisher data groups for webhook
      operationId: subscribeDataGroups
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: dataGroupIds
          in: query
          description: ID array of publisher data groups to subscribe
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or data group not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/unsubscribeDataGroups:
    post:
      tags:
        - webhook
      summary: Unsubscribe publisher events for webhook
      description: Unsubscribe publisher events for webhook
      operationId: unsubscribeDataGroups
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
        - name: dataGroupIds
          in: query
          description: ID array of publisher data groups to unsubscribe
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Webhook or data group not found
      security:
        - api_key: []
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/allSubscribedEvents:
    get:
      tags:
        - webhook
      summary: Find all subscribed events which belong to specific webhook with pagination
      description: Will find the subscribed events on the page specified (page, pageSize)
      operationId: findSubscribedEvents
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook which subscribed events belong to
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number of subscribed events query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum subscribed events on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Validation exception
      security:
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/allSubscribedDataGroups:
    get:
      tags:
        - webhook
      summary: Find all subscribed data groups which belong to specific webhook with pagination
      description: Will find the subscribed data groups on the page specified (page, pageSize)
      operationId: findSubscribedDataGroups
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook which subscribed data groups belong to
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number of subscribed data groups query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum subscribed data groups on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataGroup'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataGroup'
        '400':
          description: Validation exception
      security:
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /webhook/subscribedDataGroup:
    get:
      tags:
        - webhook
      summary: Find the subscribed data group which belong to specific webhook with data group name
      description: Will find the subscribed data group which belong to specific webhook with data group name
      operationId: findSubscribedDataGroup
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook which subscribed data group belong to
          required: true
          schema:
            type: string
        - name: dataGroup
          in: query
          description: name of data group to find
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataGroup'          
            application/xml:
              schema:
                $ref: '#/components/schemas/DataGroup'          
        '400':
          description: Validation exception
      security:
        - webhook_auth:
            - write:webhooks
            - read:webhooks
  /engine/version:
    get:
      tags:
        - engine
      summary: Get the webhook engine version
      description: Get the webhook engine version
      operationId: getEngineVersion
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation exception
      security:
        - engine_auth:
            - write:engine
            - read:engine
  /engine/trigger:
    post:
      tags:
        - engine
      summary: Trigger a webhook event and post a message
      description: Trigger a webhook event and post a message
      operationId: trigger
      requestBody:
        description: Trigger a webhook event and post a message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookMessage'
          application/xml:
            schema:
              $ref: '#/components/schemas/WebhookMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WebhookMessage'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation exception
      security:
        - api_key: []
        - engine_auth:
            - write:engine
            - read:engine
  /engine/allPublisherWebhookLogs:
    get:
      tags:
        - engine
      summary: Find all webhook logs which triggered by specific publisher with pagination
      description: Will find the webhook logs on the page specified (page, pageSize)
      operationId: findAllPublisherWebhookLogs
      parameters:
        - name: publisherId
          in: query
          description: ID of publisher which triggered webhooks
          required: true
          schema:
            type: string
        - name: dataGroup
          in: query
          description: Data group (name) which triggered webhooks
          schema:
            type: string
        - name: page
          in: query
          description: The page number of webhook logs query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum webhook logs on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLog'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLog'
        '400':
          description: Validation exception
      security:
        - webhooklog_auth:
            - write:webhooklogs
            - read:webhooklogs
  /engine/allSubscriberWebhookLogs:
    get:
      tags:
        - engine
      summary: Find all webhook logs which dispatched to specific subscriber with pagination
      description: Will find the webhook logs on the page specified (page, pageSize)
      operationId: findAllSubscriberWebhookLogs
      parameters:
        - name: webhookId
          in: query
          description: ID of webhook which receive events & messages
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The page number of webhook logs query result
          required: true
          explode: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Maximum webhook logs on current page
          required: true
          explode: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLog'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLog'
        '400':
          description: Validation exception
      security:
        - webhooklog_auth:
            - write:webhooklogs
            - read:webhooklogs
  /engine/webhookLines:
    get:
      tags:
        - engine
      summary: Find all webhook log lines which belong to specific request & webhook
      description: Will find the webhook log lines
      operationId: findWebhookLogLines
      parameters:
        - name: requestId
          in: query
          description: ID of request
          required: true
          schema:
            type: string
        - name: webhookId
          in: query
          description: ID of webhook
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLogLine'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLogLine'
        '400':
          description: Validation exception
      security:
        - webhooklog_auth:
            - write:webhooklogs
            - read:webhooklogs
components:
  schemas:
    Organization:
      description: Could be company, business unit, or any other organization type, publisher / subscriber should belongs to one organization
      required:
        - organizationName
        - email
      type: object
      properties:
        organizationId:
          type: string
          description: ID of organization, should be unique, system will assign auto-generated ID if it's null
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        organizationName:
          type: string
          description: Organization name, required
          example: Organiztion name
        email:
          type: string
          description: Organization official email, required and should be unique
          example: test@email.com, should be unique
        website:
          type: string
          description: Organization official website URL
          example: https://test.domain.com
        logoLink:
          type: string
          description: Organization official logo URL
          example: https://test.domain.com/images/logo.png
        organizationStatus:
          type: string
          description: Organization Status
          example: ACTIVE
          enum:
            - ACTIVE
            - INACTIVE
            - LOCKED
        createdBy:
          type: string
          description: The user name who create current organization
          example: danialdy
        creationTime:
          type: string
          description: The time when current organization is created
          format: date-time
          example: 2025-01-23T14:56:07Z
      xml:
        name: organization
    Publisher:
      description: Could be a version of publisher application. Publisher publishes events (along with messages) which subscribers can subscribe
      required:
        - organizationId
        - supportDataGroup
        - version
      type: object
      properties:
        publisherId:
          type: string
          description: ID of publisher, should be unique, system will assign auto-generated ID if it's null
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        organizationId:
          type: string
          description: ID of organization which current publisher should belongs to, required and (organizationId + version) should be unique
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        supportDataGroup:
          type: boolean
          description: Current publisher support multiple data group (some publisher need to separate data between different business units or merchants) or not
        version:
          type: string
          description: Publisher version, required and (organizationId + version) should be unique
          example: 1.0.0
        createdBy:
          type: string
          description: The user name who create current publisher
          example: danialdy
        creationTime:
          type: string
          description: The time when current publisher is created
          format: date-time
          example: 2025-01-23T14:56:07Z
      xml:
        name: publisher
    DataGroup:
      description: Could be one of business unit / merchant of the publisher, if the 'supportDataGroup' property of publisher is 'true'
      required:
        - publisherId
        - dataGroup
      type: object
      properties:
        dataGroupId:
          type: string
          description: ID of data group, should be unique, system will assign auto-generated ID if it's null
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        publisherId:
          type: string
          description: ID of publisher which current data group belongs to, required and (publisherId + dataGroup) should be unique
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        dataGroup:
          type: string
          description: Data group (the identity if the data group, means should be unique among the publisher, usally could be business unit ID / merchant ID), required and (publisherId + dataGroup) should be unique
          example: 6791d42ed3d172552ed09459
      xml:
        name: datagroup
    Event:
      description: The event which publisher will publish (trigger), could use eventTag to group differnt type of events. e.g., 1. product could have 'product.created' 'product.approved' 'product.outofstock' events, 2. order could have 'order.created' 'order.paid' 'order.packed' 'order.delivered' 'order.refund' 'order.returned' events. Publisher could define as many as events.
      required:
        - publisherId
        - eventType
      type: object
      properties:
        eventId:
          type: string
          description: ID of event, should be unique, system will assign auto-generated ID if it's null
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        publisherId:
          type: string
          description: ID of publisher which current event belongs to, required
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        eventType:
          type: string
          description: Event type, required and (publisherId + eventType) should be unique
          example: order.created, or order.paid, order.delivered, product.created, etc.
        eventTag:
          type: string
          description: Event tag, which could be used to group event types
          example: order, product, etc.
        contentType:
          type: string
          description: Content type (message format) which publisher triggers
          example: application/json, application/xml, etc.
        charset:
          type: string
          description: Charset (message encoding) which publisher triggers
          example: utf-8
        eventStatus:
          type: string
          description: Event Status, will be ignored when posting a new event
          example: PUBLISHED
          enum:
            - SUBMITTED
            - PUBLISHED
            - RETIRED
      xml:
        name: event
    Subscriber:
      description: Could be the subscriber which have multiple webhooks(applications) to subscribe publisher events, one organizaton only have one subscriber
      required:
        - organizationId
      type: object
      properties:
        subscriberId:
          type: string
          description: ID of subscriber, should be unique, system will assign auto-generated ID if it's null
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        organizationId:
          type: string
          description: ID of organization which current subscriber should belongs to, required and should be unique
          example: 6791d42ed3d172552ed09459, maximum 24 chars
      xml:
        name: subscriber
    Webhook:
      description: Could be an application which subscribe and receive events from publisher, one webhook could receive events from one specific (publisher + publisher version)
      required:
        - subscriberId
        - publisherId
        - publisherVersion
        - securityStrategy
        - webhookUrl
      type: object
      properties:
        webhookId:
          type: string
          description: ID of webhook, should be unique, system will assign auto-generated ID if it's null
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        subscriberId:
          type: string
          description: Subscriber ID which current webhook belongs to, required
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        appName:
          type: string
          description: Webhook name (application name)
        appTag:
          type: string
          description: Webhook tag (application tag), could used to group differnt webhooks(applications)
        description:
          type: string
          description: Webhook description
        webhookSecret:
          type: string
          description: Webhook secret, managed by system and will be ignored when posting new webhook
        publisherId:
          type: string
          description: Publisher ID which current webhook subscribed, required and (publisherId + publisherVersion) should be unique
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        publisherVersion:
          type: string
          description: Publisher version which current webhook subscribed, required and (publisherId + publisherVersion) should be unique
          example: 1.0.0
        securityStrategy:
          type: string
          description: Security Strategry, the publisher will use the specified strtegry to signature before dispatching message to current webhook, required
          example: SIGNATURE
          enum:
            - SIGNATURE
            - TOKEN
            - NONE 
        webhookUrl:
          type: string
          description: Webhook URL, which used to receive events and messages from subscribed publisher, required
          example: https://www.example.com/oms/v1/webhook
        customizedHeaders:
          type: string
          description: Customized Headers, could add special headers needed for current webhook
          example: {"key1": "value1", "key2": "value2", "key3": "value3"}
        trustedIps:
          type: array
          description: Trusted IP addresses, put current webhook website into white list
          items:
            type: string
          example:
            - "192.168.0.1"
            - "192.168.0.2"
            - "192.168.0.3"
        webhookStatus:
          type: string
          description: Webhook Status, will be ignored when posting new webhook
          example: TEST
          enum:
            - TEST
            - AWAITING_FOR_APPROVEL
            - PRODUCTION
            - INACTIVE
        createdBy:
          type: string
          description: The user name who create current webhook
          example: danialdy
        creationTime:
          type: string
          description: The time when current webhook is created
          format: date-time
          example: 2025-01-23T14:56:07Z
      xml:
        name: webhook
    WebhookLog:
      description: The webhook logs, all events (which carries messages) will be logged when publisher trigger events
      type: object
      properties:
        eventType:
          type: string
          description: The event type publisher triggered
          example: order.created, or order.paid, order.delivered, product.created, etc.
        eventTag:
          type: string
          description: The event tag publisher triggered
          example: product, order, etc.
        contentType:
          type: string
          description: The content type publisher triggered
          example: application/json, application/xml, etc.
        charset:
          type: string
          description: The message charset publisher triggered
          example: utf-8, etc.
        requestId:
          type: string
          description: ID of request
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        payload:
          type: string
          description: The payload (request body) publisher triggered
          example: {"orderId": "1", "orderTime": "2025-02-08T18:18:18", "customerId": "6791d42ed3d172552ed09459", "totalAmount": 120, "orderLines": [{"rowno": 1, "sku": "100001", "quantity": 1, "unitPrice": 40}, {"rowno": 1, "sku": "100002", "quantity": 1, "unitPrice": 80}]}
        webhookStatus:
          type: string
          description: The webhook status
          example: triggered
        triggerTime:
          type: string
          description: The time when publisher triggered the event
          format: date-time
          example: 2025-01-23T14:56:07Z
      xml:
        name: webhookLog
    WebhookLogLine:
      description: The webhook log line, log line will be added when event(message) is dispatched, got response from webhook, or exception happend
      type: object
      properties:
        logType:
          type: string
          description: The log type
          example: dispatched, success, fail, etc.
        information:
          type: string
        logTime:
          type: string
          description: The log time when the log line is added
          format: date-time
          example: 2025-01-23T14:56:07Z
        tryTime:
          type: integer
          description: How many times the event(with message) is dispatched
          format: int32
          example: 1, 2, 3
      xml:
        name: webhookLogLine
    WebhookMessage:
      description: The webhook message which triggered by publisher
      required:
        - publisherId
        - version
        - eventType
        - requestId
        - payload
      type: object
      properties:
        publisherId:
          type: string
          description: Valid publisher ID (who trigger the event and message), required
          example: 6791d42ed3d172552ed09459, maximum 24 chars
        version:
          type: string
          description: Valid publisher version (who trigger the event and message), required
          example: 1.0.0
        eventType:
          type: string
          description: Valid event type (should already been registered), required
          example: order.created, or order.paid, order.delivered, product.created, etc.
        eventTag:
          type: string
          description: Valid event tag, should already been registered
          example: product, order, etc.
        contentType:
          type: string
          description: The content type (format type of payload)
          example: application/json, application/xml, etc.
        charset:
          type: string
          description: The message charset (encoding of payload)
          example: utf-8, etc.
        dataGroup:
          type: string
          description: Data group (the identity of the data group if the publisher support multiple data group, usally could be business unit ID / merchant ID), should already been registered
          example: 6791d42ed3d172552ed09459
        requestId:
          type: string
          description: ID of request, which used to identify one request, required. Webhook could use this requestId to verify duplicated consumption, this verification should be always needed, because webhook engine will try to call webhook multiple times util got response from webhook.
          example: 6791d42ed3d172552ed09459
        payload:
          type: string
          description: The message (request body) publisher triggered, required
          example: {"orderId": "1", "orderTime": "2025-02-08T18:18:18", "customerId": "6791d42ed3d172552ed09459", "totalAmount": 120, "orderLines": [{"rowno": 1, "sku": "100001", "quantity": 1, "unitPrice": 40}, {"rowno": 1, "sku": "100002", "quantity": 1, "unitPrice": 80}]}
      xml:
        name: webhookMessage
    ApiResponse:
      description: The API response object which hold the response code and messages
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: The response code
          example: 200
        message:
          type: string
          description: The response message
          example: called successfully
        data:
          type: object
          description: The data attached to the response
      xml:
        name: apiResponse
  securitySchemes:
    organization_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:organizations: modify organizations in your account
            read:organizations: read your organizations
    publisher_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:publishers: modify publishers in you account
            read:publishers: read your publishers
    event_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:events: modify events in your account
            read:events: read your events
    datagroup_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:datagroups: modify data groups in your account
            read:datagroups: read your data groups
    subscriber_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:subscribers: modify subscribers in your account
            read:subscribers: read your subscribers
    webhook_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:webhooks: modify webhooks in your account
            read:webhooks: read your webhooks
    engine_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:engine: modify engine in your account
            read:engine: read your engine
    webhooklog_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://lettuce.plantssoil.com/oauth/authorize
          scopes:
            write:webhooklogs: modify webhook logs in your account
            read:webhooklogs: read your webhook logs
    api_key:
      type: apiKey
      name: api_key
      in: header